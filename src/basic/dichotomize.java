package basic;

/**
 * 二分的思想
 * case1：如果我想要找一个有序数组中的某个值的位置，要求时间复杂度优于 O(N)
 *
 * case2：如果我们想要找某个有序数组中最先出现某个值的位置，依然可以使用二分法，不同的是case1
 * 只要找到这个值就可以了，但是case2即使找到了这个数依然需要仅需二分，直到二分不下去了，才能确定最左侧的位置
 *
 * case3：有一个无序数组arr，在这个数组中相邻的数据一定是不相等，如果0号位置上的数小于1号位置的数，那么0号位置是局部最小
 * 如果N-1号位置上的数小于N号位置的数，那么N-1号位置是局部最小，中间的就是都要小于两边的，i-1 < i < i+1
 * 题目要求就是找到一个局部最小
 *
 * 这个题目的一个目的就是想让证明 二分不是一定要用在有序的数组上
 * 只是从常规上来说，二分通常应用在有序数组中
 * */
public class dichotomize {
}
